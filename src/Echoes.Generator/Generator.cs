using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Text;
using Microsoft.CodeAnalysis;
using Tommy;

namespace Echoes.Generator;

[Generator]
public class Generator : ISourceGenerator
{
    public record InvariantLanguageFile
    {
        public string ProjectRelativeTomlFilePath { get; }
        public string GeneratorNamespace { get; }
        public string GeneratorClassName { get; }
        public ImmutableArray<string> Units { get; }

        public InvariantLanguageFile
        (
            string projectRelativeTomlFilePath,
            string generatorNamespace,
            string generatorClassName,
            ImmutableArray<string> units
        )
        {
            ProjectRelativeTomlFilePath = projectRelativeTomlFilePath;
            GeneratorNamespace = generatorNamespace;
            GeneratorClassName = generatorClassName;
            Units = units;
        }
    }

    public void Initialize(GeneratorInitializationContext context)
    {

    }

    public void Execute(GeneratorExecutionContext context)
    {
        var translationFiles = FindRelevantFiles(context.AdditionalFiles);

        foreach (var file in translationFiles)
        {
            GenerateKeysFile(file, context);
        }
    }

    private static ImmutableArray<AdditionalText> FindRelevantFiles(ImmutableArray<AdditionalText> additionalFiles)
    {
        var translationFiles = new List<AdditionalText>();

        foreach (var additionalFile in additionalFiles)
        {
            if (additionalFile == null)
                continue;

            if (!additionalFile.Path.EndsWith(".toml"))
                continue;

            var text = additionalFile.GetText();

            if (text == null)
                continue;

            var stringText = text.ToString();

            if (stringText.Contains("[echoes_config]"))
                translationFiles.Add(additionalFile);

        }

        return translationFiles.ToImmutableArray();
    }

    private static InvariantLanguageFile? ParseTomlFiles(AdditionalText translationFile, GeneratorExecutionContext context)
    {
        var keys = new List<string>();

        var text = translationFile.GetText()?.ToString() ?? string.Empty;
        var reader = new StringReader(text);
        var parser = new TOMLParser(reader);
        var root = parser.Parse();

        if (!root.RawTable.TryGetValue("echoes_config", out var echoesConfig))
            return null;

        if (!echoesConfig.IsTable)
            return null;

        if (!echoesConfig.AsTable.RawTable.TryGetValue("generated_class_name", out var generatedClassName))
            return null;

        if (!generatedClassName.IsString)
            return null;

        if (!echoesConfig.AsTable.RawTable.TryGetValue("generated_namespace", out var generatedNamespace))
            return null;

        if (!generatedNamespace.IsString)
            return null;

        var projectFolder = context.GetCallingPath();
        var sourceFile = translationFile.Path;

        var trimmedSourceFile = sourceFile;

        if (sourceFile.StartsWith(projectFolder))
        {
            trimmedSourceFile = sourceFile.Substring(projectFolder.Length);
        }

        if (!root.RawTable.TryGetValue("translations", out var translations))
            return null;

        foreach (var pair in translations.AsTable.RawTable)
        {
            if (pair.Value.IsString)
            {
                  keys.Add(pair.Key);
            }
        }

        var units = keys.ToImmutableArray();

        return new InvariantLanguageFile(
            trimmedSourceFile,
            generatedNamespace.AsString,
            generatedClassName.AsString,
            units
        );
    }

    private static void GenerateKeysFile (AdditionalText translationFile, GeneratorExecutionContext context)
    {
        var file = ParseTomlFiles(translationFile, context);

        if (file == null)
            throw new Exception("Failed to parse translation file");

        var sb = new StringBuilder();

        sb.AppendLine($"using Echoes;");
        sb.AppendLine($"using System;");
        sb.AppendLine($"using System.Reflection;");
        sb.AppendLine($"");
        sb.AppendLine($"namespace {file.GeneratorNamespace};");
        sb.AppendLine("");
        sb.AppendLine($"// {file.ProjectRelativeTomlFilePath}");
        sb.AppendLine($"// <auto-generated/>");
        sb.AppendLine($"public static class {file.GeneratorClassName}");
        sb.AppendLine("{");

        sb.AppendLine($"\tprivate static readonly string _file = @\"{file.ProjectRelativeTomlFilePath}\";");
        sb.AppendLine($"\tprivate static readonly Assembly _assembly = typeof({file.GeneratorClassName}).Assembly;");

        foreach (var key in file.Units)
        {
            sb.AppendLine($"\tpublic static TranslationUnit {key} => new TranslationUnit(_assembly, _file, \"{key}\");");
        }

        sb.AppendLine("}");

        var text = sb.ToString();

        context.AddSource(file.GeneratorClassName + ".g.cs", text);
    }
}